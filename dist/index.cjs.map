{"version":3,"sources":["../src/update.ts","../src/index.ts"],"sourcesContent":["import { execSync } from 'child_process';\nimport os from 'os';\nimport { join } from 'path';\n\nimport fs from 'fs-extra';\nimport { Listr } from 'listr2';\nimport picocolors from 'picocolors';\n\nexport default async () => {\n  const DX_REPO_NAME = 'kamdz/dx';\n  const DX_REPO_URL = `https://github.com/${DX_REPO_NAME}`;\n  const DX_TEMP_DIR = fs.mkdtempSync(join(os.tmpdir(), 'kamdz_dx-'));\n  const CURRENT_DIR = process.cwd();\n  const SKIP_PATHS = ['.git', 'bin', 'src', 'package.json', 'README.MD', 'yarn.lock'];\n  const INIT_PACKAGE_VALUES = {\n    name: '__PROJECT_NAME__',\n    version: '0.0.0-development',\n    private: true,\n    description: '',\n    keywords: [],\n    bugs: { url: 'https://github.com/__PROJECT_NAME__/issues' },\n    repository: { type: 'git', url: 'https://github.com/__PROJECT_NAME__' },\n    author: {\n      name: 'Kamil Dzwonkowski',\n      email: 'npm@kamdz.dev',\n      url: 'https://github.com/kamdz'\n    },\n    dependencies: {}\n  };\n\n  const update = new Listr([\n    {\n      title: `Updating project with latest ${picocolors.bold(`@${DX_REPO_NAME}`)}`,\n      task: (_, task): Listr =>\n        task.newListr(\n          [\n            {\n              title: 'Cloning template',\n              task: async (): Promise<void> => {\n                execSync(`git clone ${DX_REPO_URL} ${DX_TEMP_DIR} --quiet`);\n              }\n            },\n            {\n              title: 'Syncing',\n              task: (_, task): Listr => {\n                const items = fs.readdirSync(DX_TEMP_DIR).filter(item => !SKIP_PATHS.includes(item));\n                const tasks = items.map(item => {\n                  return {\n                    title: item,\n                    task: async (): Promise<void> => {\n                      await fs.copy(join(DX_TEMP_DIR, item), join(CURRENT_DIR, item));\n                    }\n                  };\n                });\n                tasks.push({\n                  title: 'package.json',\n                  task: async (): Promise<void> => {\n                    fs.readJSON(join(CURRENT_DIR, 'package.json'))\n                      .then(async packageJson => {\n                        const dxPackageJson = await fs.readJSON(join(DX_TEMP_DIR, 'package.json'));\n                        const workingPackagejson = { ...packageJson };\n                        Object.keys(workingPackagejson).forEach(key => {\n                          if (key in INIT_PACKAGE_VALUES) {\n                            if (['scripts', 'devDependencies'].includes(key)) {\n                              workingPackagejson[key] = Object.assign(workingPackagejson[key], dxPackageJson[key]);\n                            } else {\n                              workingPackagejson[key] = dxPackageJson[key];\n                            }\n                          }\n                        });\n                        await fs.writeJSON(join(CURRENT_DIR, 'package.json'), workingPackagejson, { spaces: '  ' });\n                      })\n                      .catch(async () => {\n                        const dxPackageJson = await fs.readJSON(join(DX_TEMP_DIR, 'package.json'));\n                        const workingPackagejson = { ...dxPackageJson };\n                        const keys = Object.keys(INIT_PACKAGE_VALUES) as Array<keyof typeof INIT_PACKAGE_VALUES>;\n                        keys.forEach(key => {\n                          workingPackagejson[key] = INIT_PACKAGE_VALUES[key];\n                        });\n                        await fs.writeJSON(join(CURRENT_DIR, 'package.json'), workingPackagejson, { spaces: '  ' });\n                      });\n                  }\n                });\n                return task.newListr(tasks, { concurrent: true });\n              }\n            }\n          ],\n          { rendererOptions: { collapseSubtasks: false } }\n        )\n    }\n  ]);\n\n  try {\n    await update.run();\n    await fs.remove(DX_TEMP_DIR);\n  } catch (e: unknown) {\n    console.error(e);\n    process.exit(1);\n  }\n};\n","import update from '@/update';\n\nupdate();\n"],"mappings":"wdAAA,IAAAA,EAAyB,yBACzBC,EAAe,mBACfC,EAAqB,gBAErBC,EAAe,yBACfC,EAAsB,kBACtBC,EAAuB,2BAEhBC,EAAQ,SAAY,CACzB,IAAMC,EAAe,WACfC,EAAc,sBAAsBD,CAAY,GAChDE,EAAc,EAAAC,QAAG,eAAY,QAAK,EAAAC,QAAG,OAAO,EAAG,WAAW,CAAC,EAC3DC,EAAc,QAAQ,IAAI,EAC1BC,EAAa,CAAC,OAAQ,MAAO,MAAO,eAAgB,YAAa,WAAW,EAC5EC,EAAsB,CAC1B,KAAM,mBACN,QAAS,oBACT,QAAS,GACT,YAAa,GACb,SAAU,CAAC,EACX,KAAM,CAAE,IAAK,4CAA6C,EAC1D,WAAY,CAAE,KAAM,MAAO,IAAK,qCAAsC,EACtE,OAAQ,CACN,KAAM,oBACN,MAAO,gBACP,IAAK,0BACP,EACA,aAAc,CAAC,CACjB,EAEMC,EAAS,IAAI,QAAM,CACvB,CACE,MAAO,gCAAgC,EAAAC,QAAW,KAAK,IAAIT,CAAY,EAAE,CAAC,GAC1E,KAAM,CAACU,EAAGC,IACRA,EAAK,SACH,CACE,CACE,MAAO,mBACP,KAAM,SAA2B,IAC/B,YAAS,aAAaV,CAAW,IAAIC,CAAW,UAAU,CAC5D,CACF,EACA,CACE,MAAO,UACP,KAAM,CAACQ,EAAGC,IAAgB,CAExB,IAAMC,EADQ,EAAAT,QAAG,YAAYD,CAAW,EAAE,OAAOW,GAAQ,CAACP,EAAW,SAASO,CAAI,CAAC,EAC/D,IAAIA,IACf,CACL,MAAOA,EACP,KAAM,SAA2B,CAC/B,MAAM,EAAAV,QAAG,QAAK,QAAKD,EAAaW,CAAI,KAAG,QAAKR,EAAaQ,CAAI,CAAC,CAChE,CACF,EACD,EACD,OAAAD,EAAM,KAAK,CACT,MAAO,eACP,KAAM,SAA2B,CAC/B,EAAAT,QAAG,YAAS,QAAKE,EAAa,cAAc,CAAC,EAC1C,KAAK,MAAMS,GAAe,CACzB,IAAMC,EAAgB,MAAM,EAAAZ,QAAG,YAAS,QAAKD,EAAa,cAAc,CAAC,EACnEc,EAAqB,CAAE,GAAGF,CAAY,EAC5C,OAAO,KAAKE,CAAkB,EAAE,QAAQC,GAAO,CACzCA,KAAOV,IACL,CAAC,UAAW,iBAAiB,EAAE,SAASU,CAAG,EAC7CD,EAAmBC,CAAG,EAAI,OAAO,OAAOD,EAAmBC,CAAG,EAAGF,EAAcE,CAAG,CAAC,EAEnFD,EAAmBC,CAAG,EAAIF,EAAcE,CAAG,EAGjD,CAAC,EACD,MAAM,EAAAd,QAAG,aAAU,QAAKE,EAAa,cAAc,EAAGW,EAAoB,CAAE,OAAQ,IAAK,CAAC,CAC5F,CAAC,EACA,MAAM,SAAY,CAEjB,IAAMA,EAAqB,CAAE,GADP,MAAM,EAAAb,QAAG,YAAS,QAAKD,EAAa,cAAc,CAAC,CAC3B,EACjC,OAAO,KAAKK,CAAmB,EACvC,QAAQU,GAAO,CAClBD,EAAmBC,CAAG,EAAIV,EAAoBU,CAAG,CACnD,CAAC,EACD,MAAM,EAAAd,QAAG,aAAU,QAAKE,EAAa,cAAc,EAAGW,EAAoB,CAAE,OAAQ,IAAK,CAAC,CAC5F,CAAC,CACL,CACF,CAAC,EACML,EAAK,SAASC,EAAO,CAAE,WAAY,EAAK,CAAC,CAClD,CACF,CACF,EACA,CAAE,gBAAiB,CAAE,iBAAkB,EAAM,CAAE,CACjD,CACJ,CACF,CAAC,EAED,GAAI,CACF,MAAMJ,EAAO,IAAI,EACjB,MAAM,EAAAL,QAAG,OAAOD,CAAW,CAC7B,OAASgB,EAAY,CACnB,QAAQ,MAAMA,CAAC,EACf,QAAQ,KAAK,CAAC,CAChB,CACF,ECjGAC,EAAO","names":["import_child_process","import_os","import_path","import_fs_extra","import_listr2","import_picocolors","update_default","DX_REPO_NAME","DX_REPO_URL","DX_TEMP_DIR","fs","os","CURRENT_DIR","SKIP_PATHS","INIT_PACKAGE_VALUES","update","picocolors","_","task","tasks","item","packageJson","dxPackageJson","workingPackagejson","key","e","update_default"]}