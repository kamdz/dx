{"version":3,"sources":["../bin/cli.ts","../src/update.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\nimport { program } from 'commander';\n\nimport update from '@/update';\n\nimport packageJson from '../package.json';\n\nprogram\n  .version(packageJson.version)\n  .description(packageJson.description)\n  .action(() => {\n    update();\n  });\n\nprogram.parse(process.argv);\n","import { execSync } from 'child_process';\nimport os from 'os';\nimport { join } from 'path';\n\nimport fs from 'fs-extra';\nimport { Listr } from 'listr2';\nimport picocolors from 'picocolors';\n\nexport default async () => {\n  const DX_REPO_NAME = 'kamdz/dx';\n  const DX_REPO_URL = `https://github.com/${DX_REPO_NAME}`;\n  const DX_TEMP_DIR = fs.mkdtempSync(join(os.tmpdir(), 'kamdz_dx-'));\n  const CURRENT_DIR = process.cwd();\n  const SKIP_PATHS = ['.git', 'bin', 'src', 'package.json', 'README.MD', 'yarn.lock'];\n  const INIT_PACKAGE_VALUES = {\n    name: '__PROJECT_NAME__',\n    version: '0.0.0-development',\n    private: true,\n    description: '',\n    keywords: [],\n    bugs: { url: 'https://github.com/__PROJECT_NAME__/issues' },\n    repository: { type: 'git', url: 'https://github.com/__PROJECT_NAME__' },\n    author: {\n      name: 'Kamil Dzwonkowski',\n      email: 'npm@kamdz.dev',\n      url: 'https://github.com/kamdz'\n    },\n    dependencies: {}\n  };\n\n  const update = new Listr([\n    {\n      title: `Updating project with latest ${picocolors.bold(`@${DX_REPO_NAME}`)}`,\n      task: (_, task): Listr =>\n        task.newListr(\n          [\n            {\n              title: 'Cloning template',\n              task: async (): Promise<void> => {\n                execSync(`git clone ${DX_REPO_URL} ${DX_TEMP_DIR} --quiet`);\n              }\n            },\n            {\n              title: 'Syncing',\n              task: (_, task): Listr => {\n                const items = fs.readdirSync(DX_TEMP_DIR).filter(item => !SKIP_PATHS.includes(item));\n                const tasks = items.map(item => {\n                  return {\n                    title: item,\n                    task: async (): Promise<void> => {\n                      await fs.copy(join(DX_TEMP_DIR, item), join(CURRENT_DIR, item));\n                    }\n                  };\n                });\n                tasks.push({\n                  title: 'package.json',\n                  task: async (): Promise<void> => {\n                    fs.readJSON(join(CURRENT_DIR, 'package.json'))\n                      .then(async packageJson => {\n                        const dxPackageJson = await fs.readJSON(join(DX_TEMP_DIR, 'package.json'));\n                        const workingPackagejson = { ...packageJson };\n                        Object.keys(workingPackagejson).forEach(key => {\n                          if (key in INIT_PACKAGE_VALUES) {\n                            if (['scripts', 'devDependencies'].includes(key)) {\n                              workingPackagejson[key] = Object.assign(workingPackagejson[key], dxPackageJson[key]);\n                            } else {\n                              workingPackagejson[key] = dxPackageJson[key];\n                            }\n                          }\n                        });\n                        await fs.writeJSON(join(CURRENT_DIR, 'package.json'), workingPackagejson, { spaces: '  ' });\n                      })\n                      .catch(async () => {\n                        const dxPackageJson = await fs.readJSON(join(DX_TEMP_DIR, 'package.json'));\n                        const workingPackagejson = { ...dxPackageJson };\n                        const keys = Object.keys(INIT_PACKAGE_VALUES) as Array<keyof typeof INIT_PACKAGE_VALUES>;\n                        keys.forEach(key => {\n                          workingPackagejson[key] = INIT_PACKAGE_VALUES[key];\n                        });\n                        await fs.writeJSON(join(CURRENT_DIR, 'package.json'), workingPackagejson, { spaces: '  ' });\n                      });\n                  }\n                });\n                return task.newListr(tasks, { concurrent: true });\n              }\n            }\n          ],\n          { rendererOptions: { collapseSubtasks: false } }\n        )\n    }\n  ]);\n\n  try {\n    await update.run();\n    await fs.remove(DX_TEMP_DIR);\n  } catch (e: unknown) {\n    console.error(e);\n    process.exit(1);\n  }\n};\n","{\n  \"name\": \"@kamdz/dx\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"description\": \"\",\n  \"keywords\": [],\n  \"bugs\": {\n    \"url\": \"https://github.com/kamdz/dx/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/kamdz/dx\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Kamil Dzwonkowski\",\n    \"email\": \"npm@kamdz.dev\",\n    \"url\": \"https://github.com/kamdz\"\n  },\n  \"type\": \"module\",\n  \"exports\": {\n    \"import\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.js\"\n    },\n    \"require\": {\n      \"types\": \"./dist/index.d.cts\",\n      \"require\": \"./dist/index.cjs\"\n    }\n  },\n  \"main\": \"./dist/index.cjs\",\n  \"module\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"bin\": \"./dist/cli.js\",\n  \"files\": [\n    \"dist\",\n    \"package.json\",\n    \"README.md\",\n    \"CHANGELOG.md\",\n    \"LICENSE\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"cli\": \"tsx bin/cli.ts\",\n    \"commit\": \"cz\",\n    \"dev\": \"tsx watch src/index.ts\",\n    \"dx\": \"npx @kamdz/dx\",\n    \"format\": \"prettier --write --ignore-unknown .\",\n    \"lint\": \"eslint . --fix\",\n    \"lint-staged\": \"lint-staged\",\n    \"prepare\": \"husky\",\n    \"semantic-release\": \"semantic-release\",\n    \"start\": \"tsx src/index.ts\",\n    \"test\": \"jest --coverage --passWithNoTests\",\n    \"type-check\": \"tsc --noEmit\"\n  },\n  \"lint-staged\": {\n    \"**/*.{ts,tsx,js,jsx,cjs,mjs,}\": [\n      \"eslint --fix\"\n    ],\n    \"**/*.{ts,tsx,js,jsx,json,md,cjs,mjs,yml,yaml}\": [\n      \"prettier --write --ignore-unknown\"\n    ]\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"release\": {\n    \"branches\": [\n      \"main\"\n    ],\n    \"plugins\": [\n      \"@semantic-release/commit-analyzer\",\n      \"@semantic-release/release-notes-generator\",\n      [\n        \"@semantic-release/changelog\",\n        {\n          \"changelogFile\": \"CHANGELOG.md\"\n        }\n      ],\n      \"@semantic-release/npm\",\n      [\n        \"@semantic-release/git\",\n        {\n          \"assets\": [\n            \"dist\",\n            \"package.json\",\n            \"README.md\",\n            \"CHANGELOG.md\",\n            \"LICENSE\"\n          ],\n          \"message\": \"chore(release): ${nextRelease.version} \\n\\n${nextRelease.notes}\"\n        }\n      ]\n    ]\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.5.0\",\n    \"@commitlint/config-conventional\": \"^19.5.0\",\n    \"@eslint/compat\": \"^1.2.1\",\n    \"@eslint/js\": \"^9.13.0\",\n    \"@ianvs/prettier-plugin-sort-imports\": \"^4.3.1\",\n    \"@semantic-release/changelog\": \"^6.0.3\",\n    \"@semantic-release/git\": \"^10.0.1\",\n    \"@types/fs-extra\": \"^11.0.4\",\n    \"@types/jest\": \"^29.5.13\",\n    \"@types/node\": \"^22.7.8\",\n    \"commitizen\": \"^4.3.1\",\n    \"cz-conventional-changelog\": \"^3.3.0\",\n    \"eslint\": \"^9.13.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-import\": \"^2.31.0\",\n    \"eslint-plugin-prettier\": \"^5.2.1\",\n    \"globals\": \"^15.11.0\",\n    \"husky\": \"^9.1.6\",\n    \"jest\": \"^29.7.0\",\n    \"lint-staged\": \"^15.2.10\",\n    \"prettier\": \"3.3.3\",\n    \"semantic-release\": \"^24.1.3\",\n    \"ts-jest\": \"^29.2.5\",\n    \"tsup\": \"^8.3.0\",\n    \"tsx\": \"^4.19.1\",\n    \"typescript\": \"^5.6.3\",\n    \"typescript-eslint\": \"^8.11.0\"\n  },\n  \"packageManager\": \"yarn@4.5.1\",\n  \"dependencies\": {\n    \"commander\": \"^12.1.0\",\n    \"fs-extra\": \"^11.2.0\",\n    \"listr2\": \"^8.2.5\",\n    \"picocolors\": \"^1.1.1\"\n  }\n}\n"],"mappings":"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","names":["program","execSync","os","join","fs","Listr","picocolors","update_default","DX_REPO_NAME","DX_REPO_URL","DX_TEMP_DIR","CURRENT_DIR","SKIP_PATHS","INIT_PACKAGE_VALUES","update","_","task","tasks","item","packageJson","dxPackageJson","workingPackagejson","key","e","package_default","program","package_default","update_default"]}