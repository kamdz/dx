import{execSync as E}from"child_process";import P from"os";import{join as o}from"path";import s from"fs-extra";import{Listr as f}from"listr2";import h from"picocolors";var _=async()=>{let p="kamdz/dx",k=`https://github.com/${p}`,a=s.mkdtempSync(o(P.tmpdir(),"kamdz_dx-")),i=process.cwd(),l=[".git","bin","src","package.json","README.MD","yarn.lock"],r={name:"__PROJECT_NAME__",version:"0.0.0-development",private:!0,description:"",keywords:[],bugs:{url:"https://github.com/__PROJECT_NAME__/issues"},repository:{type:"git",url:"https://github.com/__PROJECT_NAME__"},author:{name:"Kamil Dzwonkowski",email:"npm@kamdz.dev",url:"https://github.com/kamdz"},dependencies:{}},g=new f([{title:`Updating project with latest ${h.bold(`@${p}`)}`,task:(m,u)=>u.newListr([{title:"Cloning template",task:async()=>{E(`git clone ${k} ${a} --quiet`)}},{title:"Syncing",task:(y,w)=>{let d=s.readdirSync(a).filter(e=>!l.includes(e)).map(e=>({title:e,task:async()=>{await s.copy(o(a,e),o(i,e))}}));return d.push({title:"package.json",task:async()=>{s.readJSON(o(i,"package.json")).then(async e=>{let c=await s.readJSON(o(a,"package.json")),n={...e};Object.keys(n).forEach(t=>{t in r&&(["scripts","devDependencies"].includes(t)?n[t]=Object.assign(n[t],c[t]):n[t]=c[t])}),await s.writeJSON(o(i,"package.json"),n,{spaces:"  "})}).catch(async()=>{let c={...await s.readJSON(o(a,"package.json"))};Object.keys(r).forEach(t=>{c[t]=r[t]}),await s.writeJSON(o(i,"package.json"),c,{spaces:"  "})})}}),w.newListr(d,{concurrent:!0})}}],{rendererOptions:{collapseSubtasks:!1}})}]);try{await g.run(),await s.remove(a)}catch(m){console.error(m),process.exit(1)}};_();
//# sourceMappingURL=index.js.map